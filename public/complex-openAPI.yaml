openapi: 3.1.0
info:
  title: Enterprise Inventory API
  version: 3.0.0
  description: >
    Fully-featured inventory system API for warehouse items, categories, locations.
    Supports polymorphic product types, detailed error handling, pagination and filtering.

servers:
  - url: https://api.example.com/v3

security:
  - ApiKeyAuth: []

paths:
  /items:
    get:
      summary: List all items
      security:
        - ApiKeyAuth: []
      parameters:
        - name: category
          in: query
          description: Filter items by category ID
          schema:
            type: string
        - name: type
          in: query
          description: Filter by item type (electronics, furniture, clothing)
          schema:
            type: string
            enum: [electronics, furniture, clothing]
        - name: limit
          in: query
          description: Max items returned
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: offset
          in: query
          description: Pagination offset
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: A paginated list of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
              examples:
                default:
                  value:
                    total: 2
                    items:
                      - id: "uuid1"
                        name: "Smartphone"
                        type: electronics
                      - id: "uuid2"
                        name: "Wood Table"
                        type: furniture
        '404':
          description: No items found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new item
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewItem'
            examples:
              electronic:
                value:
                  name: "Laptop"
                  type: electronics
                  categoryId: "cat123"
                  locationId: "loc456"
                  details:
                    type: electronics
                    specs:
                      power: "65W"
                      warrantyYears: 2
                      features: ["Bluetooth", "WiFi"]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /items/{id}:
    parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        schema:
          type: string
    get:
      summary: Retrieve item
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update item
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewItem'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete item
      security:
        - ApiKeyAuth: []
      responses:
        '204':
          description: Deleted
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /categories:
    get:
      summary: List categories
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Category list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /categories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get category
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /locations:
    get:
      summary: List warehouse locations
      security:
        - ApiKeyAuth: []
      parameters:
        - name: capacityMin
          in: query
          description: Minimum capacity filter
          schema:
            type: integer
            minimum: 0
        - name: capacityMax
          in: query
          description: Maximum capacity filter
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WarehouseLocation'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      
  schemas:
    Item:
      type: object
      required: [id, name, type, category, location, details]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [electronics, furniture, clothing]
        category:
          $ref: '#/components/schemas/Category'
        location:
          $ref: '#/components/schemas/WarehouseLocation'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        details:
          oneOf:
            - $ref: '#/components/schemas/ElectronicsDetails'
            - $ref: '#/components/schemas/FurnitureDetails'
            - $ref: '#/components/schemas/ClothingDetails'
          discriminator:
            propertyName: type
        supplierInfo:
          type: object
          required: [supplierId, name, contact, address]
          properties:
            supplierId:
              type: string
              format: uuid
            name:
              type: string
            contact:
              type: object
              properties:
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  pattern: '^\\+?[0-9]{7,15}$'
            address:
              type: object
              properties:
                street:
                  type: string
                city:
                  type: string
                country:
                  type: string
                zipCode:
                  type: string
            certifications:
              type: array
              items:
                type: object
                required: [name, issuedBy]
                properties:
                  name:
                    type: string
                  issuedBy:
                    type: string
                  validUntil:
                    type: string
                    format: date
                  metadata:
                    type: object
                    properties:
                      verified:
                        type: boolean
                      issuedAt:
                        type: string
                        format: date
            contract:
              type: object
              properties:
                contractId:
                  type: string
                terms:
                  type: object
                  properties:
                    startDate:
                      type: string
                      format: date
                    endDate:
                      type: string
                      format: date
                    autoRenew:
                      type: boolean

    Category:
      type: object
      required: [id, name, parentCategory]
      properties:
        id:
          type: string
        name:
          type: string
        parentCategory:
          allOf:
            - $ref: '#/components/schemas/CategoryReference'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    CategoryReference:
      type: object
      description: Lightweight category reference
      properties:
        id:
          type: string
        name:
          type: string

    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        metadata:
          $ref: '#/components/schemas/TagMetadata'

    TagMetadata:
      type: object
      properties:
        color:
          type: string
          example: "#FF0000"
        description:
          type: string
        createdBy:
          $ref: '#/components/schemas/User'

    User:
      type: object
      required: [id, name, role]
      properties:
        id:
          type: string
        name:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'

    UserRole:
      type: string
      enum: [admin, editor, viewer]

    WarehouseLocation:
      type: object
      properties:
        id: { type: string }
        name:
              type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zip:
              type: string
        aisle: { type: string }
        shelf: { type: string }
        createdBy:
          $ref: '#/components/schemas/User'
        audit:
          $ref: '#/components/schemas/AuditInfo'

    AuditInfo:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          $ref: '#/components/schemas/User'

    ElectronicsDetails:
      allOf:
        - $ref: '#/components/schemas/BaseItemDetails'
        - type: object
          required: [type, specs]
          properties:
            type:
              type: string
              enum: [electronics]
            specs:
              $ref: '#/components/schemas/ElectronicsSpecs'

    ElectronicsSpecs:
      type: object
      properties:
        power: { type: string }
        warrantyYears: { type: integer }
        manufacturer:
          $ref: '#/components/schemas/Supplier'

    FurnitureDetails:
      allOf:
        - $ref: '#/components/schemas/BaseItemDetails'
        - type: object
          required: [type, material, dimensions]
          properties:
            type:
              type: string
              enum: [furniture]
            material: { type: string }
            dimensions:
              $ref: '#/components/schemas/Dimensions'

    ClothingDetails:
      allOf:
        - $ref: '#/components/schemas/BaseItemDetails'
        - type: object
          required: [type, size, fabric]
          properties:
            type:
              type: string
              enum: [clothing]
            size:
              type: string
              enum: [XS, S, M, L, XL]
            fabric: { type: string }
            supplier:
              $ref: '#/components/schemas/Supplier'

    BaseItemDetails:
      type: object
      properties:
        releaseDate:
          type: string
          format: date
        warranty:
          type: string

    Dimensions:
      type: object
      required: [length, width, height]
      properties:
        length: { type: number }
        width: { type: number }
        height: { type: number }

    Supplier:
      type: object
      required: [id, name]
      properties:
        id:
          type: string
        name:
          type: string
        contact:
          $ref: '#/components/schemas/ContactInfo'

    ContactInfo:
      type: object
      properties:
        email: { type: string, format: email }
        phone: { type: string }
        address:
          $ref: '#/components/schemas/Address'

    Address:
      type: object
      properties:
        street: { type: string }
        city: { type: string }
        zip: { type: string }
        country: { type: string }

    NewItem:
      allOf:
        - type: object
          required:
            - name
            - details
          properties:
            name:
              type: string
            tags:
              type: array
              items:
                type: string
        - type: object
          properties:
            details:
              oneOf:
                - $ref: '#/components/schemas/ElectronicsDetails'
                - $ref: '#/components/schemas/FurnitureDetails'

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Human-readable message
        details:
          type: array
          items:
            type: string
